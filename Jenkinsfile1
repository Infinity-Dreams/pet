pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  
   stages {
    stage('Compile') {
       steps {
         sh 'mvn compile' //only compilation of the code
       }
    }  
   stage('Test') {
     steps {
       sh '''
       mvn clean install
       ls
       pwd
       ''' 
        //if the code is compiled, we test and package it in its distributable format; run IT and store in local repository
      }
    }
     stage('SonarQScan') {
       steps {
        withSonarQubeEnv(installationName: 'sq1') {
         sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar'
        }
      }
    }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
    }
 
}
